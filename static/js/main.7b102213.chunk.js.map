{"version":3,"sources":["CodingLanguagePacks/javaDarkTheme.js","scripts/makeCodeAreaPretty.js","ReactComponents/CodeArea.js","App.js","index.js"],"names":["javaDarkTheme","abstractKeyWord","classKeyWord","constKeyWord","enumKeyWord","extendsKeyWord","falseKeyWord","finalKeyWord","gotoKeyWord","implementsKeyWord","importKeyWord","instanceofKeyWord","interfaceKeyWord","nativeKeyWord","nullKeyWord","packageKeyWord","privateKeyWord","protectedKeyWord","publicKeyWord","staticKeyWord","strictfpKeyWord","superKeyWord","synchronizedKeyWord","thisKeyWord","throwsKeyWord","transientKeyWord","trueKeyWord","volatileKeyWord","assertKeyWord","breakKeyWord","caseKeyWord","catchKeyWord","continueKeyWord","defaultKeyWord","doKeyWord","elseKeyWord","finallyKeyWord","forKeyWord","ifKeyWord","newKeyWord","returnKeyWord","switchKeyWord","throwKeyWord","tryKeyWord","voidKeyWord","whileKeyWord","booleanKeyWord","byteKeyWord","charKeyWord","doubleKeyWord","floatKeyWord","intKeyWord","longKeyWord","shortKeyWord","$","window","updateColors","eventTarget","currentHTML","currentWord","currentComment","text","html","processingComment","i","length","charAt","substring","match","getCursorIndex","selection","anchorNode","nodeName","nodeCtr","charCtr","selectionNode","parentNode","currentNode","childNodes","undefined","textContent","getRangeAt","startOffset","moveCursorToNewPosition","cursorIndex","modify","replaceAngleBrackets","currentChar","newText","processKeyDown","event","ctrlKey","altKey","keyCode","key","clearedText","trim","getSelection","isCollapsed","newCursorIndex","focusNode","currentText","anchorOffset","focusOffset","foundFirst","foundSecond","document","querySelector","forEach","clearHighlightedText","target","insertChar","characterToInsert","wholeText","preventDefault","pasteAsPlainText","textToPaste","clipboardData","getData","replace","tagName","parentElement","CodeArea","useState","className","contentEditable","wrap","tab-size","spellCheck","onKeyDown","makeCodeAreaPretty","onPaste","App","style","textAlign","marginLeft","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7b102213.chunk.js","sourcesContent":["let javaDarkTheme = {\r\n    //Blue: #569cd6\r\n    abstractKeyWord: \"#569cd6\",\r\n    classKeyWord: \"#569cd6\",\r\n    constKeyWord: \"#569cd6\",\r\n    enumKeyWord: \"#569cd6\",\r\n    extendsKeyWord: \"#569cd6\",\r\n    falseKeyWord: \"#569cd6\",\r\n    finalKeyWord: \"#569cd6\",\r\n    gotoKeyWord: \"#569cd6\",\r\n    implementsKeyWord: \"#569cd6\",\r\n    importKeyWord: \"#569cd6\",\r\n    instanceofKeyWord: \"#569cd6\",\r\n    interfaceKeyWord: \"#569cd6\",\r\n    nativeKeyWord: \"#569cd6\",\r\n    nullKeyWord: \"#569cd6\",\r\n    packageKeyWord: \"#569cd6\",\r\n    privateKeyWord: \"#569cd6\",\r\n    protectedKeyWord: \"#569cd6\",\r\n    publicKeyWord: \"#569cd6\",\r\n    staticKeyWord: \"#569cd6\",\r\n    strictfpKeyWord: \"#569cd6\",\r\n    superKeyWord: \"#569cd6\",\r\n    synchronizedKeyWord: \"#569cd6\",\r\n    thisKeyWord: \"#569cd6\",\r\n    throwsKeyWord: \"#569cd6\",\r\n    transientKeyWord: \"#569cd6\",\r\n    trueKeyWord: \"#569cd6\",\r\n    volatileKeyWord: \"#569cd6\",\r\n\r\n    //Purple: #c586c0\r\n    assertKeyWord: \"#c586c0\",\r\n    breakKeyWord: \"#c586c0\",\r\n    caseKeyWord: \"#c586c0\",\r\n    catchKeyWord: \"#c586c0\",\r\n    continueKeyWord: \"#c586c0\",\r\n    defaultKeyWord: \"#c586c0\",\r\n    doKeyWord: \"#c586c0\",\r\n    elseKeyWord: \"#c586c0\",\r\n    finallyKeyWord: \"#c586c0\",\r\n    forKeyWord: \"#c586c0\",\r\n    ifKeyWord: \"#c586c0\",\r\n    newKeyWord: \"#c586c0\",\r\n    returnKeyWord: \"#c586c0\",\r\n    switchKeyWord: \"#c586c0\",\r\n    throwKeyWord: \"#c586c0\",\r\n    tryKeyWord: \"#c586c0\",\r\n    voidKeyWord: \"#c586c0\",\r\n    whileKeyWord: \"#c586c0\",\r\n\r\n    //Aqua: #4ec9b0\r\n    booleanKeyWord: \"#4ec9b0\",\r\n    byteKeyWord: \"#4ec9b0\",\r\n    charKeyWord: \"#4ec9b0\",\r\n    doubleKeyWord: \"#4ec9b0\",\r\n    floatKeyWord: \"#4ec9b0\",\r\n    intKeyWord: \"#4ec9b0\",\r\n    longKeyWord: \"#4ec9b0\",\r\n    shortKeyWord: \"#4ec9b0\",\r\n}\r\n\r\nexport default javaDarkTheme;","import javaDarkTheme from \"../CodingLanguagePacks/javaDarkTheme.js\";\r\nconst $ = window.$;\r\n\r\n//TODO:\r\n    //Update the backspace & delete key to check for a tab-sized sequence of spaces?\r\n        //only if numSpaces%tabsize==0, otherwise delete a single space\r\n    //Tab size should be determined from the toolbar selection\r\n    //Parentheses and brackets\r\n        //ghost brackets that fully appear when you hit enter?\r\n        //Go down an extra line and auto-tab to the same spot as the previous line\r\n    //Auto-Tabbing \r\n        //When you hit enter, the next line gets auto-tabbed to the same position as the previous line\r\n            //if the last real character in the previous line is an open bracket, tab in one extra\r\n    //If a word starts with a capital, update the color (it is a class)\r\n\r\n    //Comments -> /*\r\n\r\n//BUGS:\r\n\r\n    // if | else\r\n        //Cursor between the if and else, hitting enter shoves else two lines down instead of one\r\n\r\n    //Copy and pasting spans pastes a new <pre> tag with the span inside\r\n\r\n    //When pasting content, it should paste without formatting, then update the colors\r\n        //formatting meaning font-type, font-size, boldness, background-color, etc. \r\n            //keep the spaces and tabs and stuff\r\n                //do I need to convert tabs to spaces??\r\n                    // and update them to the corresponding tab-size selected?\r\n\r\n//NICE TO DO: \r\n    //Comments /** */\r\n\r\nfunction processKeyDown(event) {\r\n       \r\n    if(!event.ctrlKey && !event.altKey) {\r\n\r\n        let keyCode = event.keyCode;\r\n        let key = event.key;\r\n        \r\n        //Delete any highlighted/selected text before processing the keydown event\r\n        let clearedText = false;\r\n        if(key.trim().length === 1 || keyCode === 32 || keyCode === 9 || keyCode === 13 || keyCode === 8 || keyCode === 46) { \r\n            clearedText = clearHighlightedText(event.target);\r\n        }\r\n        \r\n        let eventTarget = $(event.target);\r\n        let selection = window.getSelection();\r\n        let cursorIndex = getCursorIndex(event.target, selection);\r\n        let newCursorIndex = cursorIndex + 1;\r\n        let insertChar = false;\r\n        let characterToInsert = \"\";\r\n\r\n        //Space key pressed\r\n        if(keyCode === 32) {\r\n            characterToInsert = \" \";\r\n            insertChar = true;\r\n        }    \r\n        //Tab key pressed\r\n        else if(keyCode === 9) {\r\n            characterToInsert = \"    \"; //BUILD THIS FROM THE TAB SIZE SELECTED\r\n            newCursorIndex = cursorIndex + characterToInsert.length;\r\n            insertChar = true;\r\n        }\r\n        //Enter key pressed\r\n        else if(keyCode === 13) {\r\n            if(eventTarget.text().length > 0) {\r\n                characterToInsert = selection.focusOffset >= selection.anchorNode.wholeText.length ? \"\\n\\r\": \"\\n\"; //If cursor is at the end of the line, add carriage return\r\n                insertChar = true;\r\n            }\r\n        } \r\n\r\n        //Backspace key pressed\r\n        else if(keyCode === 8) {\r\n            event.preventDefault();\r\n            \r\n            //If there was highlighted/selected text and the user pressed Backspace, clearHighlightedText() has handled this already\r\n            if(!clearedText) {\r\n                //Update html as text (removes all spans)\r\n                eventTarget.html(\r\n                    replaceAngleBrackets(eventTarget.text().substring(0, cursorIndex - 1)) + //All text up until the one character before cursor\r\n                    replaceAngleBrackets(eventTarget.text().substring(cursorIndex)) //All text after the cursor\r\n                );\r\n                cursorIndex -= 1;\r\n            }\r\n\r\n            updateColors(eventTarget);\r\n            moveCursorToNewPosition(selection, cursorIndex);\r\n        }\r\n        //Delete key pressed\r\n        else if(keyCode === 46) {\r\n            event.preventDefault();\r\n\r\n            //If there was highlighted/selected text and the user pressed Delete, clearHighlightedText() has handled this already\r\n            if(!clearedText) {\r\n                //Update html as text (removes all spans)\r\n                eventTarget.html(\r\n                    replaceAngleBrackets(eventTarget.text().substring(0, cursorIndex)) + //All text up until the one character before cursor\r\n                    replaceAngleBrackets(eventTarget.text().substring(cursorIndex + 1)) //All text after the cursor\r\n                );\r\n            }\r\n\r\n            updateColors(eventTarget);\r\n            moveCursorToNewPosition(selection, cursorIndex);\r\n        }\r\n        \r\n        //Any character/symbol (excluding special keys like ALT, CTRL, SPACE, PGDOWN, etc)\r\n        if(key.trim().length === 1 || insertChar) {\r\n            event.preventDefault();\r\n\r\n            if(characterToInsert === \"\") {\r\n                characterToInsert = key;\r\n            }\r\n\r\n            //Update html as text (removes all spans)\r\n            eventTarget.html(\r\n                replaceAngleBrackets(eventTarget.text().substring(0, cursorIndex)) + //All text up until the cursor\r\n                replaceAngleBrackets(characterToInsert) +\r\n                replaceAngleBrackets(eventTarget.text().substring(cursorIndex)) //All text after the cursor\r\n            );\r\n\r\n            updateColors(eventTarget);\r\n            moveCursorToNewPosition(selection, newCursorIndex);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Cycles through the CodeArea's contents which have been converted to their text \r\n * values (no html tags) prior to calling this method. Each word that matches a keyword\r\n * is added as a <span> with its corresponding colour. The keyword/color mappings are found\r\n * in separate files.  \r\n * \r\n * @param {$(event.target)} eventTarget \r\n */\r\nfunction updateColors(eventTarget) { \r\n    let currentHTML = \"\", currentWord = \"\", currentComment = \"//\", text = eventTarget.html() + \" \"; //Add extra space so the last word is processed\r\n    let processingComment = false;\r\n\r\n    for(let i = 0; i < text.length; i++) {\r\n\r\n        currentHTML += text.charAt(i);\r\n\r\n        //Check for single-line comment (//)\r\n        if(processingComment || (text.charAt(i-1) === \"/\" && text.charAt(i-2) === \"/\")) {\r\n            \r\n            if(text.charAt(i) === \"\\n\" || i === text.length - 1) {\r\n                currentHTML = currentHTML.substring(0, currentHTML.length - currentComment.length - 1) + \r\n                            \"<span class='CodeArea-comment-span'>\" + currentComment + \"</span>\\n\";\r\n                currentComment = \"//\";\r\n                processingComment = false;\r\n            }\r\n            else {\r\n                currentComment += text.charAt(i);\r\n                processingComment = true;\r\n            }\r\n        }\r\n        //Check for language keyword\r\n        else if(text.charAt(i).match(/[^a-z_]/i)) { //character is not a letter (case-insensitive) or underscore\r\n            //Check if currentWord is a keyword\r\n            if(javaDarkTheme[currentWord + \"KeyWord\"]) {\r\n\r\n                //Wrap in a <span> with its color \r\n                currentHTML = currentHTML.substring(0, currentHTML.length - currentWord.length - 1) + \r\n                              \"<span style='color: \" + javaDarkTheme[currentWord + \"KeyWord\"] + \"'>\" + currentWord + \"</span>\" +\r\n                              currentHTML.charAt(currentHTML.length-1);\r\n            }\r\n            currentWord = \"\";\r\n        }\r\n        \r\n        else {\r\n            currentWord += text.charAt(i);\r\n        }\r\n    }\r\n\r\n    eventTarget.html(currentHTML.substring(0, currentHTML.length-1)); //Remove the extra space that was added at the end\r\n}\r\n\r\n/**\r\n * Cycles through each node in the CodeArea (a series of text nodes and span tags) to \r\n * find the \"absolute\" cursor position in the entire CodeArea. window.getSelection() only\r\n * gives the relative cursor position within the current node. \r\n * \r\n * @param {event.target} eventTarget \r\n * @param {window.getSelection()} selection \r\n */\r\nfunction getCursorIndex(eventTarget, selection) {\r\n\r\n    if(selection.anchorNode.nodeName === \"PRE\") return 0; //If selection \r\n\r\n    let nodeCtr = 0;\r\n    let charCtr = 0;\r\n    let selectionNode = selection.anchorNode.parentNode.nodeName === \"SPAN\" ? selection.anchorNode.parentNode : selection.anchorNode;\r\n    let currentNode = eventTarget.childNodes[0];\r\n\r\n    while(currentNode !== undefined && currentNode !== selectionNode) {\r\n        nodeCtr++;\r\n        charCtr += currentNode.textContent.length;\r\n        currentNode = eventTarget.childNodes[nodeCtr];\r\n    }\r\n\r\n    return charCtr + selection.getRangeAt(0).startOffset;\r\n}\r\n\r\n/**\r\n * Moves the cursor caret from the beginning of the CodeArea to the \r\n * specified \"absolute\" cursor index.\r\n * \r\n * @param {window.getSelection()} selection \r\n * @param {int} cursorIndex \r\n */ \r\nfunction moveCursorToNewPosition(selection, cursorIndex) {\r\n    for(let i = 0; i < cursorIndex; i++) {\r\n        selection.modify(\"move\", \"right\", \"character\");\r\n    }\r\n}\r\n\r\n/**\r\n * If selection.isCollapsed === false, the user has some text highlighted/selected when \r\n * they triggered the keydown event. All nodes between then anchorNode and focusNode (inclusive) \r\n * are removed. This takes into account selections that are in the middle of a node, selections\r\n * that are within a single node, and selections that span multiple nodes. \r\n * \r\n * The anchorNode and focusNode mark the beginning and end of a selection:\r\n *    - If a user selects from left-to-right, the anchorNode will be on the left and the focusNode will be on the right. \r\n *    - If a user selects from right-to-left, the anchorNode will be on the right and the focusNode will be on the left.  \r\n * \r\n * @param {event.target} eventTarget \r\n * @returns {boolean} true if selection is collapsed\r\n */\r\nfunction clearHighlightedText(eventTarget) {\r\n    let selection = window.getSelection();\r\n\r\n    //There is text highlighted/selected\r\n    if(!selection.isCollapsed) { \r\n        \r\n        //anchorNode => node in which selection starts \r\n        let anchorNode = selection.anchorNode.parentNode.nodeName === \"SPAN\" ? selection.anchorNode.parentNode : selection.anchorNode;\r\n        //focusNode => node in which selection ends\r\n        let focusNode = selection.focusNode.parentNode.nodeName === \"SPAN\" ? selection.focusNode.parentNode : selection.focusNode;\r\n        let currentText = \"\";\r\n        let newCursorIndex;\r\n\r\n        if(anchorNode === focusNode) {\r\n\r\n            newCursorIndex = getCursorIndex(eventTarget, selection);\r\n            \r\n            if(selection.anchorOffset > selection.focusOffset) {\r\n                currentText =  $(eventTarget).text().substring(0, newCursorIndex) + $(eventTarget).text().substring(selection.anchorOffset);\r\n            }\r\n            else {\r\n                currentText =  $(eventTarget).text().substring(0, newCursorIndex) + $(eventTarget).text().substring(selection.focusOffset);\r\n            }\r\n        }\r\n        else {\r\n            \r\n            let foundFirst = false;\r\n            let foundSecond = false;\r\n            document.querySelector('pre').childNodes.forEach( \r\n                function(currentNode) { \r\n                    \r\n                    //Add everything to the left of the anchor offset\r\n                    if(anchorNode === currentNode) {\r\n                        \r\n                        if(!foundFirst) {\r\n                            currentText += anchorNode.textContent.substring(0, selection.anchorOffset);\r\n                            newCursorIndex = currentText.length;\r\n                            foundFirst = true;\r\n                        }\r\n                        else {\r\n                            currentText += anchorNode.textContent.substring(selection.anchorOffset);\r\n                            foundSecond = true;\r\n                        }\r\n\r\n                        return;\r\n                    } \r\n                    //Add everything to the right of the focus offset\r\n                    if(focusNode === currentNode) {\r\n                        \r\n                        if(!foundFirst) {\r\n                            currentText += focusNode.textContent.substring(0, selection.focusOffset);\r\n                            newCursorIndex = currentText.length;\r\n                            foundFirst = true;\r\n                        }\r\n                        else {\r\n                            currentText += focusNode.textContent.substring(selection.focusOffset);\r\n                            foundSecond = true;\r\n                        }\r\n                        return;\r\n                    } \r\n\r\n                    //Only add nodes to the left and right of the selected nodes (exclude nodes in between)\r\n                    if(!foundFirst || foundSecond) {\r\n                        currentText += currentNode.textContent;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n        $(eventTarget).html(replaceAngleBrackets(currentText));\r\n        moveCursorToNewPosition(selection, newCursorIndex);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Takes in plain text as a parameter and replaces each \"<\" for \"&lt;\" and each \">\" for \"&gt;\".\r\n * This is needed when updating the CodeArea's inner HTML so as to not inject HTML when injecting text. \r\n * \r\n * @param {String} text \r\n */\r\nfunction replaceAngleBrackets(text) {\r\n\r\n    let currentChar;\r\n    let newText = \"\";\r\n    for(let i = 0; i < text.length; i++) {\r\n\r\n        currentChar = text.charAt(i);\r\n        \r\n        if(currentChar === \"<\") {\r\n            newText += \"&lt;\";\r\n        }\r\n        else if (currentChar === \">\") {\r\n            newText += \"&gt;\";\r\n        }\r\n        else {\r\n            newText += currentChar;\r\n        }\r\n    }\r\n\r\n    return newText;\r\n}\r\n\r\nfunction pasteAsPlainText(event) {\r\n    event.preventDefault();\r\n    let textToPaste = event.clipboardData.getData(\"text/plain\").replace(/\\r/g, \"\"); //remove carriage returns\r\n    let selection = window.getSelection();\r\n    let eventTarget = event.target.tagName === \"SPAN\" ? event.target.parentElement : event.target;\r\n    let cursorIndex = getCursorIndex(eventTarget, selection);\r\n    eventTarget = $(eventTarget);\r\n    eventTarget.html(\r\n        replaceAngleBrackets(eventTarget.text().substring(0, cursorIndex)) + //All text up until the cursor\r\n        replaceAngleBrackets(textToPaste) + \r\n        replaceAngleBrackets(eventTarget.text().substring(cursorIndex)) //All text after the cursor\r\n    );\r\n    updateColors(eventTarget);\r\n    moveCursorToNewPosition(selection, cursorIndex + textToPaste.length);\r\n}\r\n\r\nexport default {processKeyDown, updateColors, pasteAsPlainText};","import React, {useState} from \"react\";\r\nimport './CodeArea.css';\r\nimport makeCodeAreaPretty from \"../scripts/makeCodeAreaPretty.js\";\r\n\r\nconst $ = window.$;\r\n\r\nfunction CodeArea() {\r\n    const [code] = useState(`\r\n                <div>import java.io.*;</div>\r\n                <div>public class MyClass {</div>\r\n                <div>public static void main(String args[]) throws Exception {</div>\r\n                <div>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</div>\r\n                <div>String s = br.readLine();</div>\r\n                <div>System.out.println(s);</div>\r\n                <div>}</div>\r\n            <div>}</div>\r\n        `);\r\n    return (\r\n        <div className=\"container\">\r\n            <code>\r\n                <pre \r\n                    contentEditable=\"true\" \r\n                    className=\"CodeArea-textarea\" \r\n                    wrap=\"off\" \r\n                    tab-size=\"4\"\r\n                    spellCheck=\"false\" \r\n                    onKeyDown={makeCodeAreaPretty.processKeyDown}\r\n                    onPaste={makeCodeAreaPretty.pasteAsPlainText}\r\n                > \r\n                </pre>\r\n            </code>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CodeArea;","import React from 'react';\nimport CodeArea from './ReactComponents/CodeArea.js';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<header>\n\t\t\t\t<h1 style={{textAlign: \"center\"}}>App Header</h1>\n\t\t\t</header>\n\t\t\t<div>\n\t\t\t\t<h1 style={{textAlign: \"center\"}}>App Body</h1>\n\n\t\t\t\t<h3>React Components to Build:</h3>\n\t\t\t\t<p style={{marginLeft: \"0px\"}}>Text</p>\n\t\t\t\t<p style={{marginLeft: \"20px\"}}>Code</p>\n\t\t\t\t<p style={{marginLeft: \"20px\"}}>Headings</p>\n\t\t\t\t<p style={{marginLeft: \"20px\"}}>Unordered Lists</p>\n\t\t\t\t<p style={{marginLeft: \"20px\"}}>Ordered Lists</p>\n\t\t\t\t<p style={{marginLeft: \"0px\"}}>Code Textarea</p>\n\t\t\t\t<CodeArea />\n\t\t\t\t<p style={{marginLeft: \"0px\"}}>Console</p>\n\t\t\t\t\n\n\t\t\t</div>\n\t\t\t<footer>\n\t\t\t\t<h1 style={{textAlign: \"center\"}}>App Footer</h1>\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));"],"sourceRoot":""}